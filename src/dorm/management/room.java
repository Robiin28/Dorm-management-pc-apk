/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dorm.management;

import com.mysql.cj.protocol.Resultset;
import java.awt.Component;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Dell
 */
public class room extends javax.swing.JFrame {

    /**
     * Creates new form room
     */
    Connection con;
    public room() {
        initComponents();
         connection();
          populateBuildComboBox(jbuild, "building_men");
           populateBuildComboBox(jbuild2, "building_women");
           jid.setEnabled(false);
           jid.setEditable(false);
           jbuild2.setEnabled(false); 
           jbuild.setEnabled(false); 
           showTablewomen();
            showTablemen(); 

           
           
    }
     private void populateBuildComboBox(JComboBox<String> comboBox, String tableName) {
        comboBox.removeAllItems(); // Clear existing items

        try {
            String query = "SELECT DISTINCT block FROM " + tableName;
            try (PreparedStatement stmt = con.prepareStatement(query);
                 ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    comboBox.addItem(rs.getString("block"));
                }
            }
        } catch (SQLException ex) {
            // Handle the exception
            ex.printStackTrace();
        }
    }

     public void connection(){
      
         
        try {
            con=DriverManager.getConnection("jdbc:mysql://localhost:3306/dormmanage?zeroDateTimeBehavior=convertToNull","root","****");
        } catch (SQLException ex) {
            Logger.getLogger(Login_page.class.getName()).log(Level.SEVERE, null, ex);
        }
               
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtabfem = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jadd = new javax.swing.JButton();
        jnotact = new javax.swing.JRadioButton();
        jmale = new javax.swing.JRadioButton();
        jbuild = new javax.swing.JComboBox<>();
        jactive = new javax.swing.JRadioButton();
        jfem = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        jbuild2 = new javax.swing.JComboBox<>();
        jroom = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtabmale = new javax.swing.JTable();
        jid = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        femdel = new javax.swing.JButton();
        jmendel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setBounds(new java.awt.Rectangle(280, 90, 0, 0));
        setMinimumSize(new java.awt.Dimension(863, 753));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/room.png"))); // NOI18N
        jLabel1.setText("Add Room");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 102), 2));
        jPanel1.setLayout(null);
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 240, -1, -1));

        jtabfem.setBackground(new java.awt.Color(204, 255, 102));
        jtabfem.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 0), 2));
        jtabfem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jtabfem);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 470, 440, 200));

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51), 2));

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel12.setText("activate");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel13.setText("room no");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel14.setText("build.no");

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel15.setText("Add  room");

        jadd.setBackground(new java.awt.Color(0, 255, 0));
        jadd.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jadd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/login.png"))); // NOI18N
        jadd.setText("Add");
        jadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jaddActionPerformed(evt);
            }
        });

        jnotact.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jnotact.setText("not available");
        jnotact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jnotactActionPerformed(evt);
            }
        });

        jmale.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jmale.setText("for male");
        jmale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmaleActionPerformed(evt);
            }
        });

        jbuild.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jbuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbuildActionPerformed(evt);
            }
        });

        jactive.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jactive.setText("available");
        jactive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jactiveActionPerformed(evt);
            }
        });

        jfem.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jfem.setText("for women");
        jfem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jfemActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel16.setText("build.no");

        jbuild2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel15)
                        .addGap(29, 29, 29)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jbuild, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jmale)
                        .addGap(263, 263, 263)))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jfem)
                    .addComponent(jbuild2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 69, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12))
                .addGap(46, 46, 46)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jroom, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jnotact, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jactive, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jadd, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(248, 248, 248))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jmale)
                    .addComponent(jfem)
                    .addComponent(jLabel15))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbuild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbuild2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel14))
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jroom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jactive)
                    .addComponent(jnotact))
                .addGap(18, 18, 18)
                .addComponent(jadd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 720, 290));

        jtabmale.setBackground(new java.awt.Color(204, 255, 51));
        jtabmale.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 51, 51), 2));
        jtabmale.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jtabmale);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 470, 420, 200));

        jid.setBackground(new java.awt.Color(0, 255, 204));
        jid.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jid.setForeground(new java.awt.Color(0, 0, 204));
        getContentPane().add(jid, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 48, 39));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Roll room.no");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        femdel.setBackground(new java.awt.Color(255, 51, 51));
        femdel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        femdel.setForeground(new java.awt.Color(255, 255, 255));
        femdel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        femdel.setText("delete");
        femdel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femdelActionPerformed(evt);
            }
        });
        getContentPane().add(femdel, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 680, 100, 30));

        jmendel.setBackground(new java.awt.Color(255, 51, 51));
        jmendel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jmendel.setForeground(new java.awt.Color(255, 255, 255));
        jmendel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete.png"))); // NOI18N
        jmendel.setText("delete");
        jmendel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmendelActionPerformed(evt);
            }
        });
        getContentPane().add(jmendel, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 680, 90, 30));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 660, 40, 90));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Close all jframe.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 0, -1, -1));
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 680, 40, 60));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jaddActionPerformed
       String insert_sql;

    try {
        if (!jmale.isSelected() && !jfem.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please select gender.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String roomNumber = jroom.getText();
        String buildNo = jmale.isSelected() ? jbuild.getSelectedItem().toString() : jbuild2.getSelectedItem().toString();

        if (isRoomAlreadyExists(roomNumber, buildNo)) {
            // Room already exists. Suggest changing room number or building.
            JOptionPane.showMessageDialog(this, "Room already exists. Please choose a different room number or building.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (jmale.isSelected()) {
            insert_sql = "INSERT INTO mensroom(id, room_no, status, activate, build_no) VALUES (?, ?, ?, ?, ?)";
        } else {
            insert_sql = "INSERT INTO femaleroom(id, room_no, status, activate, build_no) VALUES (?, ?, ?, ?, ?)";
        }

        try (PreparedStatement stmt = con.prepareStatement(insert_sql)) {
            stmt.setInt(1, Integer.parseInt(jid.getText()));
            stmt.setString(2, jroom.getText());
            stmt.setString(3, "not booked"); // Set status to "not booked" by default
            stmt.setString(4, jactive.isSelected() ? "active" : "not active");
            stmt.setString(5, buildNo);
            stmt.executeUpdate();
        }

        JOptionPane.showMessageDialog(this, "Room added successfully");
        showTablewomen();
        showTablemen(); 
 clearInputFields();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error inserting room: " + e.getMessage());
        e.printStackTrace();
    }
// TODO add your handling code here:
    }//GEN-LAST:event_jaddActionPerformed

    private void jmaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmaleActionPerformed
        // TODO add your handling code here:
          jfem.setSelected(false);
        // Disable the jbuild2 combo box when male is selected
        jbuild2.setEnabled(false);
        // Enable the jbuild combo box
        jbuild.setEnabled(true);
      int maxIdForMale = getMaxId("mensroom");
       jid.setText(String.valueOf(maxIdForMale));

        
    }//GEN-LAST:event_jmaleActionPerformed

    private void jfemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jfemActionPerformed
        
        jmale.setSelected(false);
        
        
          // Disable the jbuild combo box when female is selected
        jbuild.setEnabled(false);
        // Enable the jbuild2 combo box
        jbuild2.setEnabled(true);
            int maxIdForFemale = getMaxId("femaleroom");
            jid.setText(String.valueOf(maxIdForFemale));

    }//GEN-LAST:event_jfemActionPerformed

    private void jactiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jactiveActionPerformed
        // TODO add your handling code here:
        
        
        jnotact.setSelected(false);
        
    }//GEN-LAST:event_jactiveActionPerformed

    private void jnotactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jnotactActionPerformed
        // TODO add your handling code here:
        
        
        jactive.setSelected(false);
    }//GEN-LAST:event_jnotactActionPerformed

    private void jmendelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmendelActionPerformed
        // TODO add your handling code here:
        try {
        int row = jtabmale.getSelectedRow();
        if (row == -1) {
            // No row selected
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int id = (int) jtabmale.getValueAt(row, 0);

        PreparedStatement stmt = con.prepareStatement("DELETE FROM mensroom WHERE id = ?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        stmt.setInt(1, id);

        stmt.executeUpdate();
        

        JOptionPane.showMessageDialog(this, "Room deleted successfully");

        stmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error deleting room: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
       
       showTablemen();   
    }//GEN-LAST:event_jmendelActionPerformed

    private void femdelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femdelActionPerformed
        // TODO add your handling code here:
        
        try {
        int row = jtabfem.getSelectedRow();
        if (row == -1) {
            // No row selected
            JOptionPane.showMessageDialog(this, "Please select a row to delete.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int id = (int) jtabfem.getValueAt(row, 0);

        PreparedStatement stmt = con.prepareStatement("DELETE FROM femaleroom WHERE id = ?", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        stmt.setInt(1, id);

        stmt.executeUpdate();
    

        JOptionPane.showMessageDialog(this, "Room deleted successfully");

        stmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error deleting room: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }

    showTablewomen();
    }//GEN-LAST:event_femdelActionPerformed

    private void jbuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbuildActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbuildActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      this.setVisible(false);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

   private boolean isRoomAlreadyExists(String room, String buildNo) throws SQLException {
    if (jmale.isSelected()) {
        return isMaleRoomAlreadyExists(room, buildNo);
    } else {
        return isFemaleRoomAlreadyExists(room, buildNo);
    }
}

private boolean isMaleRoomAlreadyExists(String room, String buildNo) throws SQLException {
    // Query the database to check if the room already exists
    String query = "SELECT room_no FROM mensroom WHERE room_no = ? AND build_no = ?";
    try (PreparedStatement stmt = con.prepareStatement(query)) {
        stmt.setInt(1, Integer.parseInt(room));
        stmt.setString(2, buildNo);

        try (ResultSet rs = stmt.executeQuery()) {
            return rs.next();
        }
    }
}

private boolean isFemaleRoomAlreadyExists(String room, String buildNo) throws SQLException {
    // Query the database to check if the room already exists
    String query = "SELECT room_no FROM femaleroom WHERE room_no = ? AND build_no = ?";
    try (PreparedStatement stmt = con.prepareStatement(query)) {
        stmt.setInt(1, Integer.parseInt(room));
        stmt.setString(2, buildNo);

        try (ResultSet rs = stmt.executeQuery()) {
            return rs.next();
        }
    }
}
    private int getMaxId(String tableName) {
    String query = "SELECT MAX(id) FROM " + tableName;
    try (PreparedStatement stmt = con.prepareStatement(query)) {
        try (ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                return rs.getInt(1) + 1;  // Add 1 to the max value
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error fetching max ID: " + e.getMessage());
        e.printStackTrace();
    }
    return 0;  // Default value if something goes wrong
}
  // ...

// ...
   public void showTablemen() {
    try {
        PreparedStatement stmt = con.prepareStatement("SELECT id, room_no, status, activate, build_no FROM mensroom", ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        ResultSet rs = stmt.executeQuery();

        // Create a DefaultTableModel
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.addColumn("ID");
        tableModel.addColumn("Room Number");
        tableModel.addColumn("Status");
        tableModel.addColumn("Activate");
        tableModel.addColumn("Build Number");

        // Populate the table model manually
        while (rs.next()) {
            Object[] row = {
                rs.getInt("id"),
                rs.getString("room_no"),
                rs.getString("status"),
                rs.getString("activate"),
                rs.getString("build_no")
            };
            tableModel.addRow(row);
        }

        // Set the table model to the JTable
        jtabmale.setModel(tableModel);

        stmt.close();
    } catch (SQLException e) {
        System.out.println("Error showing table: " + e.getMessage());
    }
}


public void showTablewomen() {
     DefaultTableModel tablemodel = (DefaultTableModel) jtabfem.getModel();
    JTableHeader header = jtabfem.getTableHeader();
    header.setFont(new Font("Times New Roman", Font.BOLD, 18));

    try {
        PreparedStatement stmt = con.prepareStatement("SELECT id, room_no, status, activate, build_no FROM femaleroom");
        ResultSet rs = stmt.executeQuery();

        // Clear existing rows and columns in the table model
        tablemodel.setRowCount(0);
        tablemodel.setColumnCount(0);

        // Add column names to the table model
        tablemodel.addColumn("ID");
        tablemodel.addColumn("Room No");
        tablemodel.addColumn("Status");
        tablemodel.addColumn("Activate");
        tablemodel.addColumn("Build No");

        // Populate rows in the table model
        while (rs.next()) {
            int id = rs.getInt("id");
            String roomNo = rs.getString("room_no");
            String status = rs.getString("status");
            String activate = rs.getString("activate");
            String buildNo = rs.getString("build_no");

            tablemodel.addRow(new Object[]{id, roomNo, status, activate, buildNo});
        }

    } catch (SQLException e) {
        System.out.println("Error showing table...");
    }
}





// Implement the getStatus and getActivate methods based on your radio button selections
private String getStatus() {
    // Implement logic to get the selected status (e.g., "Male" or "Female")
    // Return the appropriate value
    return "Male";
}

private String getActivate() {
    // Implement logic to get the selected activate status (e.g., "Active" or "Not Active")
    // Return the appropriate value
    return "Active";
}






private void clearInputFields() {
    jroom.setText("");
    jactive.setSelected(false);
    jnotact.setSelected(false);
    jmale.setSelected(false);
    jfem.setSelected(false);
    jbuild.setSelectedIndex(0);
    jbuild2.setSelectedIndex(0);
}
private void searchRoom(JTable table, String tableName, String roomNumber) {
    try {
        String query = "SELECT room_no, status, activate, build_no FROM " + tableName + " WHERE room_no = ?";
        try (PreparedStatement stmt = con.prepareStatement(query)) {
            stmt.setInt(1, Integer.parseInt(roomNumber));
            ResultSet rs = stmt.executeQuery();

            table.setModel(DbUtils.resultSetToTableModel(rs));

            // You can add sorting logic here if needed
            // ...

        }
    } catch (SQLException e) {
        System.out.println("Error searching room: " + e.getMessage());
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(room.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new room().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton femdel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JRadioButton jactive;
    private javax.swing.JButton jadd;
    private javax.swing.JComboBox<String> jbuild;
    private javax.swing.JComboBox<String> jbuild2;
    private javax.swing.JRadioButton jfem;
    private javax.swing.JTextField jid;
    private javax.swing.JRadioButton jmale;
    private javax.swing.JButton jmendel;
    private javax.swing.JRadioButton jnotact;
    private javax.swing.JTextField jroom;
    private javax.swing.JTable jtabfem;
    private javax.swing.JTable jtabmale;
    // End of variables declaration//GEN-END:variables
}
